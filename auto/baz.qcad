[[True, True, True, True, True, True, True, False, False, True, False, True, True, False, True, True, True, True, True, True, True], [True, False, False, False, False, False, True, False, True, True, False, True, False, False, True, False, False, False, False, False, True], [True, False, True, True, True, False, True, False, True, True, False, False, True, False, True, False, True, True, True, False, True], [True, False, True, True, True, False, True, False, False, True, False, True, False, False, True, False, True, True, True, False, True], [True, False, True, True, True, False, True, False, True, False, False, False, True, False, True, False, True, True, True, False, True], [True, False, False, False, False, False, True, False, True, False, False, True, True, False, True, False, False, False, False, False, True], [True, True, True, True, True, True, True, False, True, False, True, False, True, False, True, True, True, True, True, True, True], [False, False, False, False, False, False, False, False, True, True, True, True, True, False, False, False, False, False, False, False, False], [True, True, False, True, False, False, True, True, False, True, True, False, False, False, True, True, True, False, True, True, False], [False, True, True, True, True, True, False, False, False, True, False, False, False, False, False, False, True, False, True, True, True], [False, True, True, True, False, True, True, True, True, False, False, False, True, True, True, True, False, True, False, False, True], [True, False, True, False, False, False, False, False, False, False, True, True, False, False, True, False, False, True, False, False, False], [False, True, True, True, False, True, True, True, True, True, False, False, True, False, False, False, True, False, False, False, True], [False, False, False, False, False, False, False, False, True, True, True, True, False, False, False, True, False, False, True, True, False], [True, True, True, True, True, True, True, False, True, False, False, False, False, True, False, True, True, False, True, True, False], [True, False, False, False, False, False, True, False, False, True, True, True, True, True, False, True, False, False, False, False, False], [True, False, True, True, True, False, True, False, False, True, True, True, False, True, True, True, False, False, False, True, False], [True, False, True, True, True, False, True, False, True, True, False, True, False, False, False, True, True, True, False, True, True], [True, False, True, True, True, False, True, False, False, True, True, False, True, False, False, True, True, True, True, False, True], [True, False, False, False, False, False, True, False, True, True, True, False, False, True, True, True, True, True, False, False, False], [True, True, True, True, True, True, True, False, True, False, True, True, True, False, False, False, True, True, False, True, False]]
module qrcode() {
    translate([-10, 10, 0]) cube([1, 1, 1]);
    translate([-9, 10, 0]) cube([1, 1, 1]);
    translate([-8, 10, 0]) cube([1, 1, 1]);
    translate([-7, 10, 0]) cube([1, 1, 1]);
    translate([-6, 10, 0]) cube([1, 1, 1]);
    translate([-5, 10, 0]) cube([1, 1, 1]);
    translate([-4, 10, 0]) cube([1, 1, 1]);
    translate([-2, 10, 0]) cube([1, 1, 1]);
    translate([1, 10, 0]) cube([1, 1, 1]);
    translate([4, 10, 0]) cube([1, 1, 1]);
    translate([5, 10, 0]) cube([1, 1, 1]);
    translate([6, 10, 0]) cube([1, 1, 1]);
    translate([7, 10, 0]) cube([1, 1, 1]);
    translate([8, 10, 0]) cube([1, 1, 1]);
    translate([9, 10, 0]) cube([1, 1, 1]);
    translate([10, 10, 0]) cube([1, 1, 1]);
    translate([-10, 9, 0]) cube([1, 1, 1]);
    translate([-4, 9, 0]) cube([1, 1, 1]);
    translate([-2, 9, 0]) cube([1, 1, 1]);
    translate([-1, 9, 0]) cube([1, 1, 1]);
    translate([0, 9, 0]) cube([1, 1, 1]);
    translate([2, 9, 0]) cube([1, 1, 1]);
    translate([4, 9, 0]) cube([1, 1, 1]);
    translate([10, 9, 0]) cube([1, 1, 1]);
    translate([-10, 8, 0]) cube([1, 1, 1]);
    translate([-8, 8, 0]) cube([1, 1, 1]);
    translate([-7, 8, 0]) cube([1, 1, 1]);
    translate([-6, 8, 0]) cube([1, 1, 1]);
    translate([-4, 8, 0]) cube([1, 1, 1]);
    translate([-1, 8, 0]) cube([1, 1, 1]);
    translate([0, 8, 0]) cube([1, 1, 1]);
    translate([1, 8, 0]) cube([1, 1, 1]);
    translate([2, 8, 0]) cube([1, 1, 1]);
    translate([4, 8, 0]) cube([1, 1, 1]);
    translate([6, 8, 0]) cube([1, 1, 1]);
    translate([7, 8, 0]) cube([1, 1, 1]);
    translate([8, 8, 0]) cube([1, 1, 1]);
    translate([10, 8, 0]) cube([1, 1, 1]);
    translate([-10, 7, 0]) cube([1, 1, 1]);
    translate([-8, 7, 0]) cube([1, 1, 1]);
    translate([-7, 7, 0]) cube([1, 1, 1]);
    translate([-6, 7, 0]) cube([1, 1, 1]);
    translate([-4, 7, 0]) cube([1, 1, 1]);
    translate([-2, 7, 0]) cube([1, 1, 1]);
    translate([-1, 7, 0]) cube([1, 1, 1]);
    translate([0, 7, 0]) cube([1, 1, 1]);
    translate([2, 7, 0]) cube([1, 1, 1]);
    translate([4, 7, 0]) cube([1, 1, 1]);
    translate([6, 7, 0]) cube([1, 1, 1]);
    translate([7, 7, 0]) cube([1, 1, 1]);
    translate([8, 7, 0]) cube([1, 1, 1]);
    translate([10, 7, 0]) cube([1, 1, 1]);
    translate([-10, 6, 0]) cube([1, 1, 1]);
    translate([-8, 6, 0]) cube([1, 1, 1]);
    translate([-7, 6, 0]) cube([1, 1, 1]);
    translate([-6, 6, 0]) cube([1, 1, 1]);
    translate([-4, 6, 0]) cube([1, 1, 1]);
    translate([-1, 6, 0]) cube([1, 1, 1]);
    translate([4, 6, 0]) cube([1, 1, 1]);
    translate([6, 6, 0]) cube([1, 1, 1]);
    translate([7, 6, 0]) cube([1, 1, 1]);
    translate([8, 6, 0]) cube([1, 1, 1]);
    translate([10, 6, 0]) cube([1, 1, 1]);
    translate([-10, 5, 0]) cube([1, 1, 1]);
    translate([-4, 5, 0]) cube([1, 1, 1]);
    translate([-1, 5, 0]) cube([1, 1, 1]);
    translate([0, 5, 0]) cube([1, 1, 1]);
    translate([2, 5, 0]) cube([1, 1, 1]);
    translate([4, 5, 0]) cube([1, 1, 1]);
    translate([10, 5, 0]) cube([1, 1, 1]);
    translate([-10, 4, 0]) cube([1, 1, 1]);
    translate([-9, 4, 0]) cube([1, 1, 1]);
    translate([-8, 4, 0]) cube([1, 1, 1]);
    translate([-7, 4, 0]) cube([1, 1, 1]);
    translate([-6, 4, 0]) cube([1, 1, 1]);
    translate([-5, 4, 0]) cube([1, 1, 1]);
    translate([-4, 4, 0]) cube([1, 1, 1]);
    translate([-2, 4, 0]) cube([1, 1, 1]);
    translate([0, 4, 0]) cube([1, 1, 1]);
    translate([2, 4, 0]) cube([1, 1, 1]);
    translate([4, 4, 0]) cube([1, 1, 1]);
    translate([5, 4, 0]) cube([1, 1, 1]);
    translate([6, 4, 0]) cube([1, 1, 1]);
    translate([7, 4, 0]) cube([1, 1, 1]);
    translate([8, 4, 0]) cube([1, 1, 1]);
    translate([9, 4, 0]) cube([1, 1, 1]);
    translate([10, 4, 0]) cube([1, 1, 1]);
    translate([-2, 3, 0]) cube([1, 1, 1]);
    translate([0, 3, 0]) cube([1, 1, 1]);
    translate([2, 3, 0]) cube([1, 1, 1]);
    translate([-9, 2, 0]) cube([1, 1, 1]);
    translate([-8, 2, 0]) cube([1, 1, 1]);
    translate([-6, 2, 0]) cube([1, 1, 1]);
    translate([-5, 2, 0]) cube([1, 1, 1]);
    translate([-4, 2, 0]) cube([1, 1, 1]);
    translate([-3, 2, 0]) cube([1, 1, 1]);
    translate([0, 2, 0]) cube([1, 1, 1]);
    translate([2, 2, 0]) cube([1, 1, 1]);
    translate([3, 2, 0]) cube([1, 1, 1]);
    translate([4, 2, 0]) cube([1, 1, 1]);
    translate([7, 2, 0]) cube([1, 1, 1]);
    translate([9, 2, 0]) cube([1, 1, 1]);
    translate([10, 2, 0]) cube([1, 1, 1]);
    translate([-10, 1, 0]) cube([1, 1, 1]);
    translate([-9, 1, 0]) cube([1, 1, 1]);
    translate([-8, 1, 0]) cube([1, 1, 1]);
    translate([-7, 1, 0]) cube([1, 1, 1]);
    translate([-3, 1, 0]) cube([1, 1, 1]);
    translate([-2, 1, 0]) cube([1, 1, 1]);
    translate([-1, 1, 0]) cube([1, 1, 1]);
    translate([2, 1, 0]) cube([1, 1, 1]);
    translate([3, 1, 0]) cube([1, 1, 1]);
    translate([5, 1, 0]) cube([1, 1, 1]);
    translate([6, 1, 0]) cube([1, 1, 1]);
    translate([7, 1, 0]) cube([1, 1, 1]);
    translate([8, 1, 0]) cube([1, 1, 1]);
    translate([9, 1, 0]) cube([1, 1, 1]);
    translate([-4, 0, 0]) cube([1, 1, 1]);
    translate([-3, 0, 0]) cube([1, 1, 1]);
    translate([-2, 0, 0]) cube([1, 1, 1]);
    translate([1, 0, 0]) cube([1, 1, 1]);
    translate([3, 0, 0]) cube([1, 1, 1]);
    translate([5, 0, 0]) cube([1, 1, 1]);
    translate([6, 0, 0]) cube([1, 1, 1]);
    translate([8, 0, 0]) cube([1, 1, 1]);
    translate([9, 0, 0]) cube([1, 1, 1]);
    translate([10, 0, 0]) cube([1, 1, 1]);
    translate([-10, -1, 0]) cube([1, 1, 1]);
    translate([-9, -1, 0]) cube([1, 1, 1]);
    translate([-7, -1, 0]) cube([1, 1, 1]);
    translate([-5, -1, 0]) cube([1, 1, 1]);
    translate([-3, -1, 0]) cube([1, 1, 1]);
    translate([1, -1, 0]) cube([1, 1, 1]);
    translate([3, -1, 0]) cube([1, 1, 1]);
    translate([5, -1, 0]) cube([1, 1, 1]);
    translate([6, -1, 0]) cube([1, 1, 1]);
    translate([7, -1, 0]) cube([1, 1, 1]);
    translate([10, -1, 0]) cube([1, 1, 1]);
    translate([-10, -2, 0]) cube([1, 1, 1]);
    translate([-8, -2, 0]) cube([1, 1, 1]);
    translate([-6, -2, 0]) cube([1, 1, 1]);
    translate([-5, -2, 0]) cube([1, 1, 1]);
    translate([-4, -2, 0]) cube([1, 1, 1]);
    translate([-3, -2, 0]) cube([1, 1, 1]);
    translate([0, -2, 0]) cube([1, 1, 1]);
    translate([2, -2, 0]) cube([1, 1, 1]);
    translate([5, -2, 0]) cube([1, 1, 1]);
    translate([8, -2, 0]) cube([1, 1, 1]);
    translate([10, -2, 0]) cube([1, 1, 1]);
    translate([0, -3, 0]) cube([1, 1, 1]);
    translate([4, -3, 0]) cube([1, 1, 1]);
    translate([5, -3, 0]) cube([1, 1, 1]);
    translate([6, -3, 0]) cube([1, 1, 1]);
    translate([9, -3, 0]) cube([1, 1, 1]);
    translate([-10, -4, 0]) cube([1, 1, 1]);
    translate([-9, -4, 0]) cube([1, 1, 1]);
    translate([-8, -4, 0]) cube([1, 1, 1]);
    translate([-7, -4, 0]) cube([1, 1, 1]);
    translate([-6, -4, 0]) cube([1, 1, 1]);
    translate([-5, -4, 0]) cube([1, 1, 1]);
    translate([-4, -4, 0]) cube([1, 1, 1]);
    translate([-2, -4, 0]) cube([1, 1, 1]);
    translate([0, -4, 0]) cube([1, 1, 1]);
    translate([1, -4, 0]) cube([1, 1, 1]);
    translate([6, -4, 0]) cube([1, 1, 1]);
    translate([9, -4, 0]) cube([1, 1, 1]);
    translate([-10, -5, 0]) cube([1, 1, 1]);
    translate([-4, -5, 0]) cube([1, 1, 1]);
    translate([-2, -5, 0]) cube([1, 1, 1]);
    translate([0, -5, 0]) cube([1, 1, 1]);
    translate([3, -5, 0]) cube([1, 1, 1]);
    translate([4, -5, 0]) cube([1, 1, 1]);
    translate([5, -5, 0]) cube([1, 1, 1]);
    translate([6, -5, 0]) cube([1, 1, 1]);
    translate([7, -5, 0]) cube([1, 1, 1]);
    translate([8, -5, 0]) cube([1, 1, 1]);
    translate([9, -5, 0]) cube([1, 1, 1]);
    translate([-10, -6, 0]) cube([1, 1, 1]);
    translate([-8, -6, 0]) cube([1, 1, 1]);
    translate([-7, -6, 0]) cube([1, 1, 1]);
    translate([-6, -6, 0]) cube([1, 1, 1]);
    translate([-4, -6, 0]) cube([1, 1, 1]);
    translate([-2, -6, 0]) cube([1, 1, 1]);
    translate([-1, -6, 0]) cube([1, 1, 1]);
    translate([2, -6, 0]) cube([1, 1, 1]);
    translate([4, -6, 0]) cube([1, 1, 1]);
    translate([7, -6, 0]) cube([1, 1, 1]);
    translate([8, -6, 0]) cube([1, 1, 1]);
    translate([9, -6, 0]) cube([1, 1, 1]);
    translate([10, -6, 0]) cube([1, 1, 1]);
    translate([-10, -7, 0]) cube([1, 1, 1]);
    translate([-8, -7, 0]) cube([1, 1, 1]);
    translate([-7, -7, 0]) cube([1, 1, 1]);
    translate([-6, -7, 0]) cube([1, 1, 1]);
    translate([-4, -7, 0]) cube([1, 1, 1]);
    translate([0, -7, 0]) cube([1, 1, 1]);
    translate([1, -7, 0]) cube([1, 1, 1]);
    translate([7, -7, 0]) cube([1, 1, 1]);
    translate([8, -7, 0]) cube([1, 1, 1]);
    translate([9, -7, 0]) cube([1, 1, 1]);
    translate([10, -7, 0]) cube([1, 1, 1]);
    translate([-10, -8, 0]) cube([1, 1, 1]);
    translate([-8, -8, 0]) cube([1, 1, 1]);
    translate([-7, -8, 0]) cube([1, 1, 1]);
    translate([-6, -8, 0]) cube([1, 1, 1]);
    translate([-4, -8, 0]) cube([1, 1, 1]);
    translate([-2, -8, 0]) cube([1, 1, 1]);
    translate([-1, -8, 0]) cube([1, 1, 1]);
    translate([3, -8, 0]) cube([1, 1, 1]);
    translate([4, -8, 0]) cube([1, 1, 1]);
    translate([8, -8, 0]) cube([1, 1, 1]);
    translate([-10, -9, 0]) cube([1, 1, 1]);
    translate([-4, -9, 0]) cube([1, 1, 1]);
    translate([-2, -9, 0]) cube([1, 1, 1]);
    translate([-1, -9, 0]) cube([1, 1, 1]);
    translate([3, -9, 0]) cube([1, 1, 1]);
    translate([4, -9, 0]) cube([1, 1, 1]);
    translate([6, -9, 0]) cube([1, 1, 1]);
    translate([7, -9, 0]) cube([1, 1, 1]);
    translate([10, -9, 0]) cube([1, 1, 1]);
    translate([-10, -10, 0]) cube([1, 1, 1]);
    translate([-9, -10, 0]) cube([1, 1, 1]);
    translate([-8, -10, 0]) cube([1, 1, 1]);
    translate([-7, -10, 0]) cube([1, 1, 1]);
    translate([-6, -10, 0]) cube([1, 1, 1]);
    translate([-5, -10, 0]) cube([1, 1, 1]);
    translate([-4, -10, 0]) cube([1, 1, 1]);
    translate([-1, -10, 0]) cube([1, 1, 1]);
    translate([0, -10, 0]) cube([1, 1, 1]);
    translate([2, -10, 0]) cube([1, 1, 1]);
    translate([7, -10, 0]) cube([1, 1, 1]);
    translate([8, -10, 0]) cube([1, 1, 1]);
}
scale([%s,%s,%s]){union(){qrcode(); translate([-10, -10, -1]) cube([qr_size,qr_size,1]); }}
